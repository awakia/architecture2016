// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	UserParam
	Empty
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Account string `protobuf:"bytes,2,opt,name=account" json:"account,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UserParam struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserParam) Reset()                    { *m = UserParam{} }
func (m *UserParam) String() string            { return proto.CompactTextString(m) }
func (*UserParam) ProtoMessage()               {}
func (*UserParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*User)(nil), "rpc.User")
	proto.RegisterType((*UserParam)(nil), "rpc.UserParam")
	proto.RegisterType((*Empty)(nil), "rpc.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for UserService service

type UserServiceClient interface {
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error)
	Get(ctx context.Context, in *UserParam, opts ...grpc.CallOption) (UserService_GetClient, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/rpc.UserService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *UserParam, opts ...grpc.CallOption) (UserService_GetClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_UserService_serviceDesc.Streams[0], c.cc, "/rpc.UserService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_GetClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type userServiceGetClient struct {
	grpc.ClientStream
}

func (x *userServiceGetClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for UserService service

type UserServiceServer interface {
	List(context.Context, *Empty) (*User, error)
	Get(*UserParam, UserService_GetServer) error
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(UserServiceServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _UserService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).Get(m, &userServiceGetServer{stream})
}

type UserService_GetServer interface {
	Send(*User) error
	grpc.ServerStream
}

type userServiceGetServer struct {
	grpc.ServerStream
}

func (x *userServiceGetServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _UserService_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _UserService_Get_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x96, 0x92, 0x49, 0xcf, 0xcf,
	0x4f, 0xcf, 0x49, 0xd5, 0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9,
	0xcc, 0xcf, 0x2b, 0x86, 0x28, 0x51, 0x32, 0xe4, 0x62, 0x09, 0x05, 0x6a, 0x10, 0xe2, 0xe2, 0x62,
	0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x15, 0xe2, 0xe7, 0x62, 0x4f, 0x4c, 0x4e, 0xce,
	0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x02, 0x0a, 0x70, 0x0a, 0xf1, 0x70, 0xb1, 0xe4, 0x25, 0xe6, 0xa6,
	0x4a, 0x30, 0x83, 0x78, 0x4a, 0xe2, 0x5c, 0x9c, 0x20, 0x2d, 0x01, 0x89, 0x45, 0x89, 0xb9, 0xc8,
	0xfa, 0x94, 0xd8, 0xb9, 0x58, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x8d, 0x4a, 0xb9, 0xb8, 0x41, 0x2a,
	0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0x74, 0xb9, 0x58, 0x7c, 0x32, 0x8b, 0x4b, 0x84,
	0xb8, 0xf4, 0x80, 0xee, 0xd1, 0x03, 0x2b, 0x91, 0xe2, 0x04, 0xb3, 0x41, 0xaa, 0x94, 0xf8, 0x9a,
	0x2e, 0x3f, 0x99, 0xcc, 0xc4, 0x21, 0xc4, 0xa6, 0x0f, 0x72, 0x7a, 0xb1, 0x90, 0x39, 0x17, 0xb3,
	0x7b, 0x6a, 0x89, 0x10, 0x1f, 0x5c, 0x05, 0xd8, 0x26, 0x64, 0x1d, 0xc2, 0x60, 0x1d, 0xbc, 0x42,
	0xdc, 0x10, 0x1d, 0xfa, 0xd5, 0x99, 0x29, 0xb5, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0x2f, 0x19, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x43, 0x8a, 0x39, 0x03, 0x01, 0x00, 0x00,
}
